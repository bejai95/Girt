#!/bin/dash

# Make sure there has been a previous init
if [ ! -d .girt ]; then
    echo ""$0": error: girt repository directory .girt not found"
    exit 1
fi

# Check that after any --force or --cached options there is at least one file given to remove from index
if [ "$#" -eq 0 ]; then
    echo "usage: "$0" [--force] [--cached] <filenames>"
    exit 1
elif [ "$1" = "--force" ]; then
    if [ "$#" -eq 1 ]; then
        echo "usage: "$0" [--force] [--cached] <filenames>"
        exit 1
    elif [ "$2" = "--cached" ]; then
        if [ "$#" -eq 2 ]; then
            echo "usage: "$0" [--force] [--cached] <filenames>"
            exit 1
        else
            filename_arg_start_no=3
        fi
    else
        filename_arg_start_no=2
    fi
elif [ "$1" = "--cached" ]; then
    if [ "$#" -eq 1 ]; then
        echo "usage: "$0" [--force] [--cached] <filenames>"
        exit 1  
    else
        filename_arg_start_no=2
    fi
else # No options given but at least file given to remove from index
    filename_arg_start_no=1
fi

# Make sure no other command line arguments start with -[a-zA-Z._] or --.
arg_no=1 # Since shell command line arguments start with $1
for arg in "$@"; do
    if ( echo "$arg" | grep -E -q '^-[a-zA-Z._]' || echo "$arg" | grep -E -q '^--.' ) && \
    [ "$arg_no" -ge "$filename_arg_start_no" ]; then
        echo "usage: "$0" [--force] [--cached] <filenames>"
        exit 1
    fi
    arg_no="$((arg_no + 1))"
done

# Loop over all of the filenames which were given as command line arguemnts
arg_no=1 # Since shell command line arguments start with $1
for filename in "$@"; do
    if [ ! "$arg_no" -ge "$filename_arg_start_no" ]; then
        arg_no="$((arg_no + 1))"
        continue
    fi

    # Test that filename is valid
    if echo "$filename" | grep -E -q '^[._-]'; then
        echo ""$0": error: invalid filename '"$filename"'"
        exit 1
    fi
    
    # Test that filename refers to a file which exists within the index
    if [ ! -e .girt/index/"$filename" ]; then
        echo ""$0": error: '"$filename"' is not in the girt repository"
        exit 1
    fi
    
    # Check whether filename matches and is identical to a file in the current directory
    matches_curr_dir="false"
    if [ ! -z "$(ls)" ]; then
        for curr_dir_file in *; do
            if [ "$curr_dir_file" = "$filename" ] && diff .girt/index/"$filename" "$curr_dir_file" > /dev/null; then
                matches_curr_dir="true"
            fi
        done
    fi
    
    # Find the number of the most recent commit
    i=0
    found="false"
    while [ "$found" = "false" ]; do
        if [ ! -d .girt/commits/"commit "$i"" ]; then
            most_recent_num="$((i - 1))"
            found="true"
        else
            i="$((i + 1))"
        fi
    done
    
    # Check whether filename matches and is identical to a file in the most recent commit
    matches_most_recent="false"
    if [ "$most_recent_num" -ne -1 ] && [ ! -z "$(ls .girt/commits/"commit "$most_recent_num"")" ]; then
        for most_recent_commit_file in .girt/commits/"commit "$most_recent_num""/*; do
            short_filename="$(echo "$most_recent_commit_file" | cut -d/ -f4)"
            if [ "$short_filename" = "$filename" ] && diff .girt/index/"$filename" "$most_recent_commit_file" > /dev/null; then
                matches_most_recent="true"
            fi
        done
    fi
    
    # Give error messages if required 
    if [ "$1" != "--force" ]; then
        if [ "$1" = "--cached" ]; then
            if [ "$matches_curr_dir" = "false" -a "$matches_most_recent" = "false" ]; then
                echo ""$0": error: '"$filename"' in index is different to both to the working file and the repository"
                exit 1
            fi
        else # No options were given
            if [ "$matches_curr_dir" = "false" -a "$matches_most_recent" = "false" ]; then
                echo ""$0": error: '"$filename"' in index is different to both to the working file and the repository"
                exit 1
            elif [ "$matches_curr_dir" = "true" -a "$matches_most_recent" = "false" ]; then
                echo ""$0": error: '"$filename"' has staged changes in the index"
                exit 1
            elif [ "$matches_curr_dir" = "false" -a "$matches_most_recent" = "true" ]; then
                echo ""$0": error: '"$filename"' in the repository is different to the working file"
                exit 1
            fi
        fi
    fi
    
    # Remove the file from the index, and from the current directory if --cached is not an argument
    rm .girt/index/"$filename"
    if ! [ "$1" = "--cached" -o "$2" = "--cached" ]; then
        rm "$filename"
    fi
    arg_no="$((arg_no + 1))"
done
